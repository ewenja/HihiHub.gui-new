-- HitmarkerLib.lua
local Players = game:GetService("Players")
local GetPlayerFromCharacter = Players.GetPlayerFromCharacter
local camera = workspace.CurrentCamera

local Hitmarker = {}
local notifications = {}

local Toggles = nil

-- UI 設定
local startX, endX = -150, 10
local startY, lineSpacing = 40, 20
local bounceOffset = 20
local maxNotifs = 50

local function updateNotifications()
	for i, group in ipairs(notifications) do
		local y = startY + i * lineSpacing
		for _, text in ipairs(group) do
			text.Position = Vector2.new(text.Position.X, y)
		end
	end
end

local function animateHorizontal(texts, targetX, index, isOut)
	for t = 1, 10 do
		local alpha = math.sin((t / 10) * math.pi * 0.5)
		if isOut then alpha = 1 - alpha end
		local offset = bounceOffset * (1 - alpha)
		local x = isOut and (targetX + offset) or (startX + (targetX - startX) * alpha)
		local y = startY + index * lineSpacing

		texts[1].Position = Vector2.new(x, y)
		texts[2].Position = Vector2.new(x + 38, y)
		texts[3].Position = Vector2.new(x + 38 + #texts[2].Text * 7, y)
		texts[4].Position = Vector2.new(x + 38 + #texts[2].Text * 7 + #texts[3].Text * 7 + 5, y)

		task.wait(0.01)
	end
end

local function getPlayerFromPart(part)
	if typeof(part) == "Instance" and part:IsA("BasePart") then
		local model = part:FindFirstAncestorOfClass("Model")
		if model then
			return GetPlayerFromCharacter(Players, model)
		end
	end
end

local function showHitmarker(hitPart, targetName, player, duration)
	if not Toggles or not Toggles.Hitlogs or not Toggles.Hitlogs.Value then return end

	if #notifications >= maxNotifs then
		local oldest = table.remove(notifications, 1)
		for _, t in ipairs(oldest) do t:Remove() end
	end

	task.spawn(function()
		local nameStr = tostring(targetName or "Unknown")
		local partStr = tostring(hitPart or "UnknownPart")

		local distanceStr = ""
		if player and player.Character then
			local root = player.Character:FindFirstChild("HumanoidRootPart")
			if root then
				local dist = (camera.CFrame.Position - root.Position).Magnitude
				distanceStr = string.format("%.1fm", dist)
			end
		end

		local tag = Drawing.new("Text") tag.Text = "[Hit]" tag.Color = Color3.new(1, 1, 1)
		local name = Drawing.new("Text") name.Text = nameStr name.Color = Color3.fromRGB(255, 75, 75)
		local part = Drawing.new("Text") part.Text = partStr part.Color = Color3.fromRGB(100, 200, 255)
		local dist = Drawing.new("Text") dist.Text = distanceStr dist.Color = Color3.fromRGB(100, 255, 100)

		for _, txt in ipairs({tag, name, part, dist}) do
			txt.Size = 14 txt.Font = 2 txt.Center = false
			txt.Outline = true txt.ZIndex = 3 txt.Visible = true
		end

		local group = {tag, name, part, dist}
		table.insert(notifications, group)
		updateNotifications()

		local index = table.find(notifications, group)
		animateHorizontal(group, endX, index, false)
		task.wait(duration or 2)

		-- 提前移除以避免位置錯誤
		table.remove(notifications, index)
		updateNotifications()

		animateHorizontal(group, endX, index, true)
		for _, txt in ipairs(group) do txt:Remove() end
	end)
end

-- Hook once
if not Hitmarker._hooked then
	local oldNamecall
	oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
		local args = { ... }
		if checkcaller() then return oldNamecall(self, unpack(args)) end

		if getnamecallmethod() == "FireServer" and self.Name == "ProjectileInflict" then
			local hitPart = args[1]
			local player = getPlayerFromPart(hitPart)
			local targetName = player and player.Name or "Unknown"
			local partName = typeof(hitPart) == "Instance" and hitPart.Name or "UnknownPart"

			showHitmarker(partName, targetName, player, 3)
			args[1] = partName
		end

		return oldNamecall(self, unpack(args))
	end)
	Hitmarker._hooked = true
end

function Hitmarker:Init(externalToggles)
	Toggles = externalToggles
end

return Hitmarker
